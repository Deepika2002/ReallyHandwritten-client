datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
enum UserRole {
  ADMIN
  USER
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  password        String?
  emailVerified   Boolean   @default(false)
  verificationCode Int?
  image           String?
  accounts        Account[]
  sessions        Session[]
  contacts        Contact[]
  userpreference  Userpreference[]
  role            UserRole @default(USER)

}


model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Contact {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String
  lastname    String 
  address     String
  phone       String?
  email       String
  agent       String
  userId       String? @db.ObjectId
user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  userpreferenceid  String?
  dateOfImport DateTime? @default(now()) @db.Date
  status      String? @default("Pending")
  @@unique([id, userId])
}
model Userpreference {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?    @default("Preference")
  welcomeInput    String?
  addressClients  String?
  endearingTerm   String?
  withoutName     String?
  messageInput    String?
  selectCard      String?
  userId          String? @db.ObjectId
  user            User?      @relation(fields: [userId], references: [id], onDelete: Cascade) 
  @@unique([id, userId])
  
}
